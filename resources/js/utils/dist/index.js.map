{"version":3,"file":"index.js","sources":["../src/css-classes.js","../src/translations.js"],"sourcesContent":["export function mergeCssClasses(...props) {\n  \n  let cssClasses = []\n\n  props.filter(prop => ['object', 'array', 'string'].indexOf(typeof prop) >= 0).forEach(prop => {\n\n    if (typeof prop == 'string') {\n      prop = prop.split(' ')\n    }\n\n    cssClasses = cssClasses.concat(prop)\n\n  })\n\n  return cssClasses.join(' ').trim()\n\n}\n\nexport function conditionalClassNames(...classes) {\n  \n  return classes.filter(Boolean).join(' ')\n  \n}","export const lang = (key) => {\n\n  const { translations } = typeof BlazervelLang !== 'undefined' ? BlazervelLang : globalThis?.BlazervelLang\n  \n  const keys = key.split('.')\n  \n  let translation = translations\n\n  keys.map(k => translation = translation[k] || key)\n\n  return translation\n}"],"names":["filter","Boolean","join","key","translations","BlazervelLang","globalThis","split","keys","map","k","translation","prop","indexOf","forEach","cssClasses","concat","trim"],"mappings":"yCAoBE,MAAO,yBAAQA,OAAOC,SAASC,KAAK,mBCpBlB,SAACC,GAEnB,IAAQC,GAA0C,kCAAcC,oBAAgBC,kBAAAA,WAAYD,eAApFD,eAEKD,EAAII,MAAM,OAELH,EAIlB,OAFAI,EAAKC,IAAI,SAAAC,YAAmBC,EAAYD,IAAMP,0CDN9C,MAAiB,GAYjB,MAVA,yBAAMH,OAAO,SAAAY,SAAQ,CAAC,SAAU,QAAS,UAAUC,mBAAwB,IAAGC,QAAQ,SAAAF,GAEjE,qBACjBA,EAAOA,EAAKL,MAAM,MAGpBQ,EAAaA,EAAWC,OAAOJ,OAIfV,KAAK,KAAKe"}